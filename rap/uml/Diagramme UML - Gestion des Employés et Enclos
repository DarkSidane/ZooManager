classDiagram
    class Employee {
        <<abstract>>
        #String name
        #double salary
        +getName()
        +getSalary()
        +work()*
    }

    class Soigneur {
        -List~Species~ specialties
        +addSpecialty(Species)
        +healAnimal(Animal)
        +feedAnimal(Animal)
        +getSpecialties()
        +work()
    }

    class AgentMenage {
        -List~Enclos~ assignedEnclos
        +assignEnclos(Enclos)
        +cleanEnclos(Enclos)
        +work()
    }

    class Enclos {
        -String name
        -int capacity
        -List~Animal~ animals
        -double cleanliness
        +addAnimal(Animal)
        +removeAnimal(Animal)
        +clean()
        +updateState()
        +needsCleaning()
        +getName()
        +getAnimals()
        +getCleanliness()
        +getStatus()
    }

    class Role {
        <<enumeration>>
        DIRECTEUR
        SOIGNEUR
        AGENT_MENAGE
        -String displayName
        +toString()
    }

    class User {
        -Employee employee
        -Role role
        +getEmployee()
        +getRole()
        +toString()
    }

    Employee <|-- Soigneur : extends
    Employee <|-- AgentMenage : extends
    AgentMenage --> "*" Enclos : manages
    Soigneur --> "*" Species : specializes in
    Enclos --> "*" Animal : contains
    User --> Employee : represents
    User --> Role : has

    note for Employee "Classe de base pour tous les employés\nDéfinit le nom et le salaire"
    note for Enclos "Gère un groupe d'animaux\nMaintient l'état de propreté"
    note for Soigneur "Peut soigner et nourrir les animaux\nselon ses spécialités"
    note for AgentMenage "Responsable du nettoyage\ndes enclos assignés"
